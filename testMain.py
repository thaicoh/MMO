import pyautogui
import time
import cv2
import numpy as np
import pytesseract
from PIL import Image
import pyautogui
import pyperclip
import time
import pyautogui
import cv2
import time
import pandas as pd
import re
import random
import openpyxl
import numpy as np
import cv2
from ChupSoLuongSanPham import ocrSoLuongSanPham

# T·ªça ƒë·ªô c√°c n√∫t cho c√°c h√†m
nutDangVideo = (2540, 1637)  # click_nut_dang_video
nutThuVien = (2535, 1392)    # click_nut_thu_vien
nutChonVideo = (2001, 415)   # click_chon_video (t·ªça ƒë·ªô l·∫ßn ƒë·∫ßu)
nutTiepTheo = (2555, 1605)   # click_nut_tiep_theo
nutChonAnhBia = (2041, 510)  # click_nut_chon_anh_bia
nutSoVideo = (2231, 766)     # chup_anh_so_video (g√≥c tr√™n b√™n tr√°i)
nutThoatChonAnhBia = (1972, 173)  # click_thoat_chon_anh_bia
nutNhanThemSanPham = (2319, 624)  # click_nut_nhan_them_san_pham
nutThemLienKet = (2633, 157)      # click_nut_them_lien_ket
oDanLink = (1994, 364)            # click_va_dan_link
nutNhap = (2257, 730)             # click_nut_nhap
nutChonTatCaSanPham1 = (1957, 1573)  # click_nut_chon_tat_ca_san_pham (click l·∫ßn 1)
nutChonTatCaSanPham2 = (2464, 1591)  # click_nut_chon_tat_ca_san_pham (click l·∫ßn 2)
oDanMoTaVideo = (2235, 294)       # click_va_dan_mo_ta_video
nutDongYMoTa = (2609, 174)        # click_nut_dong_y_mo_ta
nutChonAnhBiaMoi1 = (2015, 1487)  # click_chon_anh_bia_moi (click l·∫ßn 1) 2643
nutChonAnhBiaMoi2 = (2628, 178)   # click_chon_anh_bia_moi (click l·∫ßn 2)
nutDang = (2357, 1625)            # click_nut_dang
nutTroVeHome = (1962, 155)        # click_tro_ve_home
nutBanNhap = (1986, 1624)         # click_nut_ban_nhap
nutBack = (1957, 165)             # click_nut_back

VUNG_SO_SANH_TOAN_MAN_HINH = (1911, 117, 2686 - 1911, 1687 - 117) # V√πng so s√°nh to√†n m√†n h√¨nh c·ªë ƒë·ªãnh

def imread_unicode(path):
    """ƒê·ªçc ·∫£nh c√≥ t√™n Unicode (c√≥ d·∫•u ti·∫øng Vi·ªát)."""
    try:
        data = np.fromfile(path, dtype=np.uint8)
        return cv2.imdecode(data, cv2.IMREAD_COLOR)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ƒë·ªçc ·∫£nh '{path}': {e}")
        return None

def click_mot_lan_vung_nut(vitri_nut, ten_nut, delay=0.5, timeout=2, threshold=0.95):
    """Click 1 l·∫ßn, ch·ª•p v√† so s√°nh ·∫£nh v√πng quanh n√∫t."""
    vung_nut = (vitri_nut[0] - 50, vitri_nut[1] - 30, 100, 60)
    
    # Ch·ª•p ·∫£nh tr∆∞·ªõc khi click
    truoc_file = f"ScreenShot\{ten_nut}_truoc.png"
    sau_file = f"ScreenShot\{ten_nut}_sau.png"
    pyautogui.screenshot(truoc_file, region=vung_nut)
    
    print(f"ƒêang click n√∫t {ten_nut} t·∫°i {vitri_nut} sau {delay} gi√¢y...")
    time.sleep(delay)
    pyautogui.moveTo(*vitri_nut, duration=0.2)
    pyautogui.click()
    print(f"ƒê√£ click n√∫t {ten_nut}. Ch·ªù ph·∫£n h·ªìi...")
    
    time.sleep(timeout)
    
    # Ch·ª•p ·∫£nh sau khi click
    pyautogui.screenshot(sau_file, region=vung_nut)
    
    # So s√°nh ·∫£nh
    img1 = imread_unicode(truoc_file)
    img2 = imread_unicode(sau_file)
    
    if img1 is None or img2 is None:
        print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh cho n√∫t {ten_nut}.")
        return False
    
    diff = cv2.absdiff(img1, img2)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 30, 255, cv2.THRESH_BINARY)
    non_zero = cv2.countNonZero(thresh)
    total_pixels = diff.shape[0] * diff.shape[1]
    similarity = 1 - (non_zero / total_pixels)
    
    print(f"ƒê·ªô t∆∞∆°ng ƒë·ªìng ·∫£nh tr∆∞·ªõc/sau cho n√∫t {ten_nut}: {similarity:.2f}")
    
    if similarity < threshold:
        print(f"‚úÖ Click n√∫t {ten_nut} th√†nh c√¥ng.")
        return True
    else:
        print(f"‚ö†Ô∏è N√∫t {ten_nut} v·∫´n c√≤n, c√≥ th·ªÉ ch∆∞a ph·∫£n h·ªìi.")
        return False

def click_mot_lan_toan_man_hinh(vitri_nut, ten_nut, delay=0.5, timeout=2, threshold=0.95):
    """Click 1 l·∫ßn, ch·ª•p v√† so s√°nh ·∫£nh to√†n m√†n h√¨nh."""
    # Ch·ª•p ·∫£nh tr∆∞·ªõc khi click
    truoc_file = f"ScreenShot\{ten_nut}_truoc.png"
    sau_file = f"ScreenShot\{ten_nut}_sau.png"
    pyautogui.screenshot(truoc_file, region=VUNG_SO_SANH_TOAN_MAN_HINH)
    
    print(f"ƒêang click n√∫t {ten_nut} t·∫°i {vitri_nut} sau {delay} gi√¢y...")
    time.sleep(delay)
    pyautogui.moveTo(*vitri_nut, duration=0.2)
    pyautogui.click()
    print(f"ƒê√£ click n√∫t {ten_nut}. Ch·ªù ph·∫£n h·ªìi...")
    
    time.sleep(timeout)
    
    # Ch·ª•p ·∫£nh sau khi click
    pyautogui.screenshot(sau_file, region=VUNG_SO_SANH_TOAN_MAN_HINH)
    
    # So s√°nh ·∫£nh
    img1 = imread_unicode(truoc_file)
    img2 = imread_unicode(sau_file)
    
    if img1 is None or img2 is None:
        print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh cho n√∫t {ten_nut}.")
        return False
    
    diff = cv2.absdiff(img1, img2)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 30, 255, cv2.THRESH_BINARY)
    non_zero = cv2.countNonZero(thresh)
    total_pixels = diff.shape[0] * diff.shape[1]
    similarity = 1 - (non_zero / total_pixels)
    
    print(f"ƒê·ªô t∆∞∆°ng ƒë·ªìng ·∫£nh tr∆∞·ªõc/sau cho n√∫t {ten_nut}: {similarity:.2f}")
    
    if similarity < threshold:
        print(f"‚úÖ Click n√∫t {ten_nut} th√†nh c√¥ng.")
        return True
    else:
        print(f"‚ö†Ô∏è N√∫t {ten_nut} v·∫´n c√≤n, c√≥ th·ªÉ ch∆∞a ph·∫£n h·ªìi.")
        return False

def click_mot_lan_khong_so_sanh(vitri_nut, ten_nut, delay=0.5):
    """Click 1 l·∫ßn, kh√¥ng ch·ª•p ·∫£nh so s√°nh."""
    print(f"ƒêang click n√∫t {ten_nut} t·∫°i {vitri_nut} sau {delay} gi√¢y...")
    time.sleep(delay)
    pyautogui.moveTo(*vitri_nut, duration=0.2)
    pyautogui.click()
    print(f"‚úÖ ƒê√£ click n√∫t {ten_nut}.")

def click_hai_lan(toa_do_1, toa_do_2, ten_nut, delay1=0.5, delay2=0.5, timeout=1, threshold=0.95):
    """Click 2 l·∫ßn, ki·ªÉm tra ·∫£nh sau l·∫ßn click th·ª© 2."""
    vung_nut_2 = (toa_do_2[0] - 50, toa_do_2[1] - 30, 100, 60)
    
    # Click l·∫ßn 1 (kh√¥ng ki·ªÉm tra)
    print(f"Click l·∫ßn 1 n√∫t {ten_nut} t·∫°i {toa_do_1}")
    time.sleep(delay1)
    pyautogui.moveTo(*toa_do_1, duration=0.2)
    pyautogui.click()
    
    # Ch·ª•p ·∫£nh tr∆∞·ªõc khi click l·∫ßn 2
    truoc_file = f"ScreenShot\{ten_nut}_truoc.png"
    sau_file = f"ScreenShot\{ten_nut}_sau.png"
    pyautogui.screenshot(truoc_file, region=vung_nut_2)
    
    # Click l·∫ßn 2
    print(f"Click l·∫ßn 2 n√∫t {ten_nut} t·∫°i {toa_do_2} sau {delay2} gi√¢y...")
    time.sleep(delay2)
    pyautogui.moveTo(*toa_do_2, duration=0.2)
    pyautogui.click()
    print(f"ƒê√£ click l·∫ßn 2 n√∫t {ten_nut}. Ch·ªù ph·∫£n h·ªìi...")
    
    time.sleep(timeout)
    
    # Ch·ª•p ·∫£nh sau khi click l·∫ßn 2
    pyautogui.screenshot(sau_file, region=vung_nut_2)
    
    # So s√°nh ·∫£nh
    img1 = imread_unicode(truoc_file)
    img2 = imread_unicode(sau_file)
    
    if img1 is None or img2 is None:
        print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh cho n√∫t {ten_nut}.")
        return False
    
    diff = cv2.absdiff(img1, img2)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 30, 255, cv2.THRESH_BINARY)
    non_zero = cv2.countNonZero(thresh)
    total_pixels = diff.shape[0] * diff.shape[1]
    similarity = 1 - (non_zero / total_pixels)
    
    print(f"ƒê·ªô t∆∞∆°ng ƒë·ªìng ·∫£nh tr∆∞·ªõc/sau cho n√∫t {ten_nut}: {similarity:.2f}")
    
    if similarity < threshold:
        print(f"‚úÖ Click n√∫t {ten_nut} th√†nh c√¥ng.")
        return True
    else:
        print(f"‚ö†Ô∏è Giao di·ªán ch∆∞a thay ƒë·ªïi r√µ r√†ng cho n√∫t {ten_nut}.")
        return False

def click_va_dan_link(vitri_o=oDanLink, doan_text="", ten_nut="d√°n link"):
    """Click v√† d√°n link/m√¥ t·∫£."""
    print(f"Click t·∫°i {vitri_o} v√† {ten_nut}...")
    pyperclip.copy(doan_text)
    pyautogui.moveTo(*vitri_o, duration=0.2)
    pyautogui.click()
    time.sleep(0.5)
    pyautogui.hotkey("ctrl", "v")
    print(f"‚úÖ ƒê√£ {ten_nut} th√†nh c√¥ng.")

def thu_lai_click(func, so_lan_thu=2, delay=1):
    """Th·ª≠ l·∫°i click n·∫øu th·∫•t b·∫°i."""
    for lan in range(so_lan_thu):
        if func():
            return True
        print(f"‚ö†Ô∏è Click th·∫•t b·∫°i l·∫ßn {lan + 1}, th·ª≠ l·∫°i...")
        time.sleep(delay)
    print("‚ùå ƒê√£ th·ª≠ nhi·ªÅu l·∫ßn nh∆∞ng v·∫´n th·∫•t b·∫°i.")
    return False

# ====================== CH·ªåN VIDEO V·ªöI LOGIC D·ªäCH T·ªåA ƒê·ªò ======================
so_lan_click_video = 0
vitri_chon_video = [2001, 415]
cuon_chuot_y = 0

def click_chon_video(delay=0.5, timeout=3, threshold=0.95):
    """
    Click ch·ªçn video theo h√†ng 4-c·ªôt.
    Tr∆∞·ªõc m·ªói l·∫ßn click:
      - Lu√¥n cu·ªôn ƒë·∫øn v·ªã tr√≠ t·ªïng = block * 180,
        v·ªõi block = so_lan_click_video // 4 (h√†ng th·ª© m·∫•y, b·∫Øt ƒë·∫ßu t·ª´ 0).
      - M·ªói h√†ng c√≥ 4 video, v·ªã tr√≠ X = base + (so_lan_click_video % 4) * 200
    """
    global vitri_chon_video, so_lan_click_video, cuon_chuot_y

    time.sleep(0.5)

    # Kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu
    if so_lan_click_video == 0:
        vitri_chon_video = list(nutChonVideo)
        cuon_chuot_y = 0

    # T√≠nh h√†ng hi·ªán t·∫°i
    block = so_lan_click_video // 4
    muc_cuon = block * 180

    # # N·∫øu m·ª©c cu·ªôn hi·ªán t·∫°i kh√°c m·ª©c mong mu·ªën -> cu·ªôn t·ªõi ƒë√≥
    # if cuon_chuot_y != muc_cuon:
    #     delta = muc_cuon - cuon_chuot_y
    #     pyautogui.scroll(-delta)
    #     cuon_chuot_y = muc_cuon
    #     print(f"üîÉ Cu·ªôn ƒë·∫øn {cuon_chuot_y}px (h√†ng {block}) tr∆∞·ªõc khi click video {so_lan_click_video + 1}")
    #     time.sleep(0.4)

    print("MUC CUON ======= ", muc_cuon)
    pyautogui.scroll(-muc_cuon)
    time.sleep(0.4)

    # C·∫≠p nh·∫≠t v·ªã tr√≠ click theo c·ªôt trong h√†ng
    vitri_chon_video = [nutChonVideo[0] + (so_lan_click_video % 4) * 200, nutChonVideo[1]]

    vitri_nut = tuple(vitri_chon_video)
    print(f"üéØ Click 'Ch·ªçn video' t·∫°i {vitri_nut} (l·∫ßn th·ª© {so_lan_click_video + 1})")

    # Th·ª±c hi·ªán click
    result = click_mot_lan_toan_man_hinh(vitri_nut, f"Ch·ªçn video {so_lan_click_video + 1}", delay, timeout, threshold)

    if result:
        so_lan_click_video += 1

    return result

def click_va_dan_mo_ta_video(vitri_o=(2235, 294), doan_text=""):
    print(f"Click t·∫°i {vitri_o} v√† them mo ta...")
    pyperclip.copy(doan_text)          # Copy v√†o clipboard
    pyautogui.moveTo(*vitri_o, duration=0.2)
    pyautogui.click()
    time.sleep(0.5)
    pyautogui.hotkey("ctrl", "v")      # D√°n t·ª´ clipboard
    print("‚úÖ ƒê√£ d√°n link th√†nh c√¥ng.")

def doc_cot_dau_tien_xlsx(file_path):
    """
    ƒê·ªçc c·ªôt ƒë·∫ßu ti√™n t·ª´ file .xlsx, b·∫Øt ƒë·∫ßu t·ª´ h√†ng 2, d·ª´ng khi g·∫∑p √¥ r·ªóng.
    Tr·∫£ v·ªÅ danh s√°ch c√°c gi√° tr·ªã trong c·ªôt ƒë·∫ßu ti√™n.
    
    Parameters:
    - file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file .xlsx
    
    Returns:
    - listLinkSP (list): Danh s√°ch c√°c gi√° tr·ªã trong c·ªôt ƒë·∫ßu ti√™n
    """
    listLinkSP = []
    
    try:
        # M·ªü file Excel
        workbook = openpyxl.load_workbook(file_path)
        # L·∫•y sheet ƒë·∫ßu ti√™n
        sheet = workbook.active
        
        # ƒê·ªçc t·ª´ h√†ng 2, c·ªôt 1 (A)
        for row in sheet.iter_rows(min_row=2, min_col=1, max_col=1, values_only=True):
            # L·∫•y gi√° tr·ªã √¥ ƒë·∫ßu ti√™n trong h√†ng
            cell_value = row[0]
            
            # N·∫øu √¥ r·ªóng, d·ª´ng ƒë·ªçc
            if cell_value is None or str(cell_value).strip() == "":
                break
                
            # Th√™m gi√° tr·ªã v√†o danh s√°ch
            listLinkSP.append(str(cell_value).strip())
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {len(listLinkSP)} gi√° tr·ªã t·ª´ c·ªôt ƒë·∫ßu ti√™n.")
        return listLinkSP
    
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
        return []
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
        return []

def doc_link_tu_txt(file_path):
    """
    ƒê·ªçc file .txt, m·ªói d√≤ng l√† m·ªôt link s·∫£n ph·∫©m.
    B·ªè qua d√≤ng tr·ªëng v√† kho·∫£ng tr·∫Øng d∆∞ th·ª´a.
    Tr·∫£ v·ªÅ danh s√°ch c√°c link.

    Parameters:
    - file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file .txt

    Returns:
    - listLinkSP (list): Danh s√°ch link s·∫£n ph·∫©m
    """
    listLinkSP = []

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            for line in f:
                link = line.strip()
                if not link:  # N·∫øu d√≤ng tr·ªëng th√¨ b·ªè qua
                    break
                listLinkSP.append(link)

        print(f"‚úÖ ƒê√£ ƒë·ªçc {len(listLinkSP)} link s·∫£n ph·∫©m t·ª´ file TXT.")
        return listLinkSP

    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
        return []
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
        return []

def get_links(listLinkSP, start_index, so_luong):
    """
    L·∫•y ra m·ªôt chu·ªói c√°c link s·∫£n ph·∫©m, c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng.
    B·∫Øt ƒë·∫ßu t·∫°i v·ªã tr√≠ start_index, l·∫•y s·ªë l∆∞·ª£ng l√† so_luong.

    Parameters:
    - listLinkSP (list): Danh s√°ch t·∫•t c·∫£ link s·∫£n ph·∫©m
    - start_index (int): V·ªã tr√≠ b·∫Øt ƒë·∫ßu (0-based index)
    - so_luong (int): S·ªë l∆∞·ª£ng link c·∫ßn l·∫•y

    Returns:
    - str: Chu·ªói c√°c link n·ªëi v·ªõi nhau b·∫±ng kho·∫£ng tr·∫Øng
    """
    if not listLinkSP:
        print("‚ùå Danh s√°ch link s·∫£n ph·∫©m r·ªóng.")
        return ""

    if start_index < 0 or start_index >= len(listLinkSP):
        start_index = start_index - len(listLinkSP)

    # L·∫•y danh s√°ch con
    end_index = start_index + so_luong
    list_con = listLinkSP[start_index:end_index]

    # Gh√©p th√†nh chu·ªói
    chuoi_link = " ".join(list_con)

    print(f"‚úÖ L·∫•y {len(list_con)} link (t·ª´ {start_index} ƒë·∫øn {end_index - 1}).")
    return chuoi_link

def ghi_log_link(list_link):
    """
    Ghi danh s√°ch link ƒë√£ d√°n v√†o file log.
    M·ªói link m·ªôt d√≤ng, ghi n·ªëi ti·∫øp v√†o file.
    """
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            for link in list_link:
                f.write(link + "\n")
        print(f"üìù ƒê√£ ghi {len(list_link)} link v√†o file log '{LOG_FILE}'.")
    except Exception as e:
        print(f"‚ùå L·ªói khi ghi file log: {e}")

def chup_va_so_sanh_da_chon_tat_ca_chua(anh_mau, nguong_giong=0.95):
    """
    Ch·ª•p v√πng m√†n h√¨nh r·ªìi so s√°nh v·ªõi ·∫£nh m·∫´u.
    Tr·∫£ v·ªÅ True n·∫øu gi·ªëng, False n·∫øu kh√°c.
    
    Parameters:
    - anh_mau (str): ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh m·∫´u ƒë·ªÉ so s√°nh
    - nguong_giong (float): m·ª©c ƒë·ªô gi·ªëng nhau (0.0‚Äì1.0), m·∫∑c ƒë·ªãnh 0.95
    """
    # T·ªça ƒë·ªô g√≥c tr√™n tr√°i v√† g√≥c d∆∞·ªõi ph·∫£i
    x1, y1 = 1936, 1541
    x2, y2 = 1983, 1596
    width, height = x2 - x1, y2 - y1

    # Ch·ª•p v√πng m√†n h√¨nh
    screenshot = pyautogui.screenshot(region=(x1, y1, width, height))
    screenshot_np = np.array(screenshot)
    screenshot_cv = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2BGR)

    # ƒê·ªçc ·∫£nh m·∫´u
    template = cv2.imread(anh_mau)
    if template is None:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh m·∫´u: {anh_mau}")
        return False

    # Resize ·∫£nh m·∫´u ƒë·ªÉ so s√°nh c√πng k√≠ch th∆∞·ªõc
    template = cv2.resize(template, (width, height))

    # So s√°nh b·∫±ng ph∆∞∆°ng ph√°p h·ªá s·ªë t∆∞∆°ng quan
    result = cv2.matchTemplate(screenshot_cv, template, cv2.TM_CCOEFF_NORMED)
    similarity = cv2.minMaxLoc(result)[1]  # l·∫•y gi√° tr·ªã max similarity

    print(f"üîç ƒê·ªô gi·ªëng nhau: {similarity:.4f}")

    if similarity >= nguong_giong:
        print("‚úÖ ·∫¢nh ch·ª•p gi·ªëng ·∫£nh m·∫´u.")
        return True
    else:
        print("‚ùå ·∫¢nh ch·ª•p KH√îNG gi·ªëng ·∫£nh m·∫´u.")
        return False

def DangVideo(index, indexLinks):

    soLuongLinkCanDan = 6

    print(f"======================================== DANG VIDEO THU {index + 1} ======================================")
    print("indexLink end trong=", indexLinks)


    # B∆∞·ªõc 1: Click n√∫t ƒêƒÉng video
    if not click_mot_lan_vung_nut(nutDangVideo, "Nut Dang Video"):
        return False

    # B∆∞·ªõc 2: Click n√∫t Th∆∞ vi·ªán
    if not click_mot_lan_toan_man_hinh(nutThuVien, "Nut Thu Vien Anh"):
        return False

    # B∆∞·ªõc 3: Click ch·ªçn video (theo th·ª© t·ª± v√† cu·ªôn)
    if not click_chon_video():
        return False


    # B∆∞·ªõc 4: Click n√∫t Ti·∫øp theo (l·∫ßn 1)
    click_mot_lan_khong_so_sanh(nutTiepTheo, "Nut Tiep Theo 1")
    
    time.sleep(0.5)

    # B∆∞·ªõc 5: Click n√∫t Ti·∫øp theo (l·∫ßn 2)
    if not click_mot_lan_toan_man_hinh(nutTiepTheo, "Nut Tiep Theo 2"):
        return False

    # B∆∞·ªõc 6: Click n√∫t Ch·ªçn ·∫£nh b√¨a
    if not click_mot_lan_toan_man_hinh(nutChonAnhBia, "Nut Chon Anh Bia"):
        return False

    # B∆∞·ªõc 7: Click ch·ªçn ·∫£nh b√¨a m·ªõi (v·ªõi t·ªça ƒë·ªô ng·∫´u nhi√™n cho l·∫ßn click 1)
    nutChonAnhBiaMoi1 = (random.randint(2015, 2643), 1487)
    if not click_hai_lan(nutChonAnhBiaMoi1, nutChonAnhBiaMoi2, "Nut Chon Anh Bia Moi"):
        return False

    time.sleep(0.5)

    # B∆∞·ªõc 8: D√°n m√¥ t·∫£ video
    click_va_dan_mo_ta_video(doan_text=moTaVideo)

    time.sleep(0.1)

    # B∆∞·ªõc 9: Click n√∫t ƒê·ªìng √Ω nh·∫≠p m√¥ t·∫£
    if not click_mot_lan_vung_nut(nutDongYMoTa, "Nut Dong Y Nhap Mo Ta"):
        return False

    # B∆∞·ªõc 10: Click n√∫t Nh·∫≠n th√™m s·∫£n ph·∫©m
    if not click_mot_lan_vung_nut(nutNhanThemSanPham, "Nut Nhan Them San Pham"):
        return False

    # B∆∞·ªõc 11: Click n√∫t Th√™m li√™n k·∫øt
    if not click_mot_lan_toan_man_hinh(nutThemLienKet, "Nut Them Lien Ket"):
        return False


    # B∆∞·ªõc 12: D√°n link s·∫£n ph·∫©m
    while True:
        # 1Ô∏è‚É£ L·∫•y nh√≥m link c·∫ßn d√°n
        list_dan = get_links(listLinkSP, indexLinks, soLuongLinkCanDan).split(" ")

        # 2Ô∏è‚É£ D√°n link
        click_va_dan_link(oDanLink, " ".join(list_dan))

        time.sleep(2)

        # 3Ô∏è‚É£ Click n√∫t nh·∫≠p link (th·ª≠ 3 l·∫ßn)
        for _ in range(3):
            if click_mot_lan_toan_man_hinh(nutNhap, "Nut Nhap Link"):
                break
        else:
            print("‚ùå L·ªói click_mot_lan_toan_man_hinh, b·ªè qua v√≤ng n√†y")
            continue
        

        if chup_va_so_sanh_da_chon_tat_ca_chua(r"C:\Users\84765\Desktop\AutoClick\mauOCLickChonTatCa.png"):
            print("Hai ·∫£nh gi·ªëng nhau!")
            indexLinks += len(list_dan)
            # 6Ô∏è‚É£ Ghi log c√°c link ƒë√£ d√°n th√†nh c√¥ng
            ghi_log_link(list_dan)

            continue
        else:
            # 4Ô∏è‚É£ Click ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m
            click_mot_lan_khong_so_sanh(nutChonTatCaSanPham1, "Nut Chon Tat Ca San Pham")
        
        time.sleep(2)

        # 5Ô∏è‚É£ OCR ƒë·∫øm s·∫£n ph·∫©m
        try:
            so_nhan_dien = int(ocrSoLuongSanPham())
        except:
            so_nhan_dien = 0

        print(f"S·ªë nh·∫≠n di·ªán ƒë∆∞·ª£c: {so_nhan_dien}")

        time.sleep(1)

        # 6Ô∏è‚É£ Ghi log c√°c link ƒë√£ d√°n th√†nh c√¥ng
        ghi_log_link(list_dan)

        # 7Ô∏è‚É£ ƒêi·ªÅu ki·ªán d·ª´ng ho·∫∑c ti·∫øp t·ª•c
        if so_nhan_dien == 6:
            indexLinks += len(list_dan)
            break
        elif so_nhan_dien < 6:
            soLuongLinkCanDan = 6 - so_nhan_dien
            indexLinks += len(list_dan)
            print(f"‚ö†Ô∏è Ch∆∞a ƒë·ªß ({so_nhan_dien}/6) ‚Üí L·∫•y th√™m {soLuongLinkCanDan} link ti·∫øp theo (index {indexLinks}).")
        else:
            print("‚ö†Ô∏è Nh·∫≠n di·ªán v∆∞·ª£t m·ª©c (sai logic), d·ª´ng ƒë·ªÉ ki·ªÉm tra.")
            break

    # # B∆∞·ªõc 13: Click n√∫t Nh·∫≠p link
    # if not click_mot_lan_toan_man_hinh(nutNhap, "Nut Nhap Link"):
    #     if not click_mot_lan_toan_man_hinh(nutNhap, "Nut Nhap Link"):
    #         if not click_mot_lan_toan_man_hinh(nutNhap, "Nut Nhap Link"):
    #             return False

    # # B∆∞·ªõc 14: Click ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m
    # if not click_hai_lan(nutChonTatCaSanPham1, nutChonTatCaSanPham2, "Nut Chon Tat Ca San Pham"):
    #     return False

    # B∆∞·ªõc 15: Click n√∫t ƒêƒÉng
    if not click_mot_lan_toan_man_hinh(nutChonTatCaSanPham2, "nutChonTatCaSanPham2"):
        return False
    
    # B∆∞·ªõc 15: Click n√∫t ƒêƒÉng
    if not click_mot_lan_toan_man_hinh(nutDang, "Nut Dang"):
        return False

    time.sleep(3)

    # B∆∞·ªõc 16: Click tr·ªü v·ªÅ trang Home
    if not click_mot_lan_toan_man_hinh(nutTroVeHome, "Nut Tro Ve Trang Home"):
        return False

    print(f"‚úÖ Hoan tat dang video thu {index + 1}")
    print("indexLink end trong=", indexLinks)
    return True, indexLinks

# V√≠ d·ª• s·ª≠ d·ª•ng:
file_path = r"C:\Users\84765\Downloads\manhinhxiaomi\link_san_pham.txt"
LOG_FILE = r"C:\Users\84765\Downloads\manhinhxiaomi\link_da_dan_mainboard2.txt"

moTaVideo = """M√¨nh h√¨nh thay th·∫ø cho ƒëi·ªán tho·∫°i xiaomi.  #ShopeeCreator #ShopeeStyle #ShopeeVideo #LuotVuiMuaLien  
#xiaomi #manhinh"""

soLuongDang = 46

listLinkSP = doc_link_tu_txt(file_path)
#Mo ta video
linkSP = ""

indexLinks = 0
soLuongLinkCanDan = 6


for i in range(soLuongDang):
    ket_qua, indexLinks = DangVideo(i, indexLinks)

    if(indexLinks >= len(listLinkSP)):
        print("da dang tat ca link SP")
        break

    if not ket_qua:
        break




